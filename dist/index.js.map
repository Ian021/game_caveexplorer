{"version":3,"sources":["scenario.js","resolution.js","player.js","input.js","game.js","dom.js","index.js"],"names":["Scenario","size_x","size_y","optional_parameters","check","checkInput","console","log","density","dispersion","maxPropagation","minPropagation","size","maxBlocks","Math","round","seedBlocksDensity","seedBlocks","blockLocations","blocks","gridMap","_generateMap","JSON","stringify","blankMap","Array","fill","map","row","row_index","col","col_index","rand","random","push","x","y","length","_generateSeedMap","propagation","min","max","forEach","location","element","player","position","code","deltaTime","timestamp","moving","speed","lastMove","ctx","grid_element_size","fillStyle","fillRect","resolution","HD","GAME_WIDTH","GAME_HEIGHT","FULLHD","SQUARE","Player","health","module","InputHandler","document","addEventListener","event","keyCode","e","direction","scenario","window","sqm","positionPlayer","input","canvas","getElementById","getContext","style","backgroundColor","setAttribute","lastTime","gameLoop","clearRect","movePlayer","move","draw","requestAnimationFrame","gamePaused","pause","getElementsByClassName","gamejs","require","dom"],"mappings":"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","file":"index.js","sourceRoot":"..\\public\\src","sourcesContent":["// Trocar forearch por for; calcular novos blocos somente nas extremidades (remover blocos antigos)\r\n\r\nexport class Scenario {\r\n    constructor(size_x,size_y,optional_parameters){\r\n        let check = this.checkInput(size_x,size_y,optional_parameters);if(check !=='TRUE'){console.log(check)}else{\r\n            this.size_x = size_x\r\n            this.size_y = size_y\r\n            if(optional_parameters.density){this.density = optional_parameters.density}else{this.density=0.2}\r\n            if(optional_parameters.dispersion){this.dispersion = optional_parameters.dispersion}else{this.dispersion=1}\r\n            if(optional_parameters.maxPropagation){this.maxPropagation = optional_parameters.maxPropagation}else{this.maxPropagation=1}\r\n            if(optional_parameters.minPropagation){this.minPropagation = optional_parameters.minPropagation}else{this.minPropagation=0.25}\r\n        }\r\n\r\n        this.size = size_x*size_y\r\n        this.maxBlocks = Math.round(this.size*this.density)\r\n\r\n        this.seedBlocksDensity = this.density*this.dispersion\r\n        this.seedBlocks = 0\r\n        this.blockLocations = []\r\n        this.blocks = 0\r\n        this.gridMap\r\n\r\n        this._generateMap()\r\n    }\r\n\r\n    checkInput(size_x,size_y,optional_parameters) {\r\n        if(typeof size_x === 'number' & typeof size_y === 'number' & typeof optional_parameters === 'object'){\r\n            if (size_x > 0 & size_y > 0){\r\n                if (size_x % 1 === 0 & size_y % 1 === 0) {\r\n                    return('TRUE')\r\n                } else {\r\n                    return('Must use integers: size_x and size_y!')\r\n                }\r\n            } else {\r\n                return('Must be Greater than zero: size_x and size_y!')\r\n            }\r\n        } else {\r\n            return('size_x and size_y Must be Natural Numbers and optional_parameters Must be an object. received '+ JSON.stringify({\r\n                size_x:typeof size_x,\r\n                size_y:typeof size_y,\r\n                optional_parameters:typeof optional_parameters\r\n            }))\r\n        }\r\n    }\r\n\r\n    _generateSeedMap(){\r\n        \r\n        let blankMap = new Array(this.size_x).fill(new Array(this.size_y).fill(0))\r\n\r\n        if (this.seedBlocksDensity > 0) {\r\n            while (this.blocks === 0){\r\n                this.gridMap = blankMap.map((row,row_index)=>{\r\n                    return(row.map((col,col_index)=>{\r\n                        let rand = Math.random()\r\n                        if(rand > this.seedBlocksDensity){\r\n                            return(0)\r\n                        } else {\r\n                            this.seedBlocks++\r\n                            this.blockLocations.push({x:row_index,y:col_index})\r\n                            return(1)\r\n                        }\r\n                    }))\r\n                })\r\n                this.blocks = this.blockLocations.length\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    _generateMap(){\r\n        this._generateSeedMap()\r\n\r\n        if(this.seedBlocks > 0){\r\n\r\n            while(this.blocks < this.maxBlocks){\r\n                \r\n                let propagation = Math.min(\r\n                    this.maxPropagation,\r\n                    Math.max(\r\n                        (this.maxBlocks - this.blocks)/(4*this.blocks),\r\n                        this.minPropagation\r\n                    )\r\n                )\r\n                \r\n                // console.log(propagation)\r\n                this.blockLocations.forEach(location =>{\r\n                    let neighboors = [{x:location.x,y:location.y+1},\r\n                                    {x:location.x+1,y:location.y},\r\n                                    {x:location.x,y:location.y-1},\r\n                                    {x:location.x-1,y:location.y}]\r\n                    neighboors.forEach(element => {\r\n                        if(element.x >= 0 & element.x < this.size_x & element.y >= 0 & element.y < this.size_y) {\r\n                            if(this.gridMap[element.x][element.y] === 0) {\r\n                                if(Math.random() < propagation) {\r\n                                    this.gridMap[element.x][element.y] = 1\r\n                                    this.blockLocations.push({x:element.x,y:element.y})\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n                this.blocks = this.blockLocations.length\r\n            }\r\n        }\r\n    }\r\n\r\n    positionPlayer(player){\r\n        player.position.x = Math.round(this.size_x/2-1)\r\n        player.position.y = Math.round(this.size_y/2-1)\r\n        this.gridMap[player.position.x][player.position.y] = player.code\r\n    }\r\n\r\n    movePlayer(player,deltaTime,timestamp){\r\n\r\n        if (deltaTime !== 0 && player.moving === false){\r\n\r\n            if( player.position.x + player.speed.x < this.size_x &&\r\n                player.position.x + player.speed.x >= 0 &&\r\n                player.position.y + player.speed.y < this.size_y &&\r\n                player.position.y + player.speed.y >= 0\r\n                ){\r\n                if (this.gridMap[player.position.x+player.speed.x][player.position.y+player.speed.y]===0){\r\n                    this.gridMap[player.position.x][player.position.y] = 0\r\n                    this.gridMap[player.position.x+player.speed.x][player.position.y+player.speed.y] = player.code\r\n\r\n                    player.position.x = player.position.x + player.speed.x\r\n                    player.position.y = player.position.y + player.speed.y\r\n                    player.moving = true\r\n                    player.lastMove = timestamp\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx,size_x,size_y,grid_element_size){\r\n\r\n        for(let x=0;x<size_x;x++){\r\n            for (let y=0;y<size_y;y++){\r\n                if (this.gridMap[x][y]===1){\r\n                    ctx.fillStyle = 'rgb(64,64,64)'\r\n                    ctx.fillRect(\r\n                        grid_element_size*x,\r\n                        grid_element_size*y,\r\n                        grid_element_size,\r\n                        grid_element_size);\r\n                } else if (this.gridMap[x][y]===100101) {\r\n                    ctx.fillStyle = 'rgb(64,64,128)'\r\n                    ctx.fillRect(\r\n                        grid_element_size*x,\r\n                        grid_element_size*y,\r\n                        grid_element_size,\r\n                        grid_element_size);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}","export const resolution = {\r\n    HD:{\r\n        GAME_WIDTH:1200,\r\n        GAME_HEIGHT:720,\r\n        size_x:15,\r\n        size_y:9\r\n    },\r\n    FULLHD:{\r\n        GAME_WIDTH:1920,\r\n        GAME_HEIGHT:1080,\r\n        size_x:16,\r\n        size_y:9\r\n    },\r\n    SQUARE:{\r\n        GAME_WIDTH:286,\r\n        GAME_HEIGHT:286,\r\n        size_x:16,\r\n        size_y:16\r\n    }\r\n}","\r\nexport class Player {\r\n    constructor(){\r\n        this.code = 100101\r\n        this.health = 100\r\n        this.moving = false\r\n        this.lastMove = 0\r\n        this.speed = {\r\n            module:200,\r\n            x:0,\r\n            y:0\r\n        }\r\n        this.position = {\r\n            x : 0,\r\n            y : 0\r\n        }\r\n    }\r\n    move(timestamp){\r\n        if(timestamp - this.lastMove > this.speed.module){\r\n            this.moving = false\r\n        }\r\n    }\r\n}","\r\nexport class InputHandler{\r\n    constructor(player){\r\n        document.addEventListener('keydown',function(event){\r\n            switch(event.keyCode) {\r\n                case 37:\r\n                    player.speed.x = -1\r\n                    break\r\n                case 38:\r\n                    player.speed.y = -1\r\n                    break\r\n                case 39:\r\n                    player.speed.x = 1\r\n                    break\r\n                case 40:\r\n                    player.speed.y = 1\r\n                    break\r\n            }\r\n        })\r\n        document.addEventListener('keyup',function(e){\r\n            player.speed.x = 0\r\n            player.speed.y = 0\r\n        })\r\n    }\r\n    buttonDirection(direction) {\r\n        switch(direction) {\r\n            case \"LEFT\":\r\n                player.speed.x = -1\r\n                break\r\n            case \"UP\":\r\n                player.speed.y = -1\r\n                break\r\n            case \"RIGHT\":\r\n                player.speed.x = 1\r\n                break\r\n            case \"DOWN\":\r\n                player.speed.y = 1\r\n                break\r\n        }\r\n    }\r\n    buttonRelease(){\r\n        player.speed.x = 0\r\n        player.speed.y = 0\r\n    }\r\n}","/*---------------------------------- ----------------------------------*/\r\nimport { Scenario } from './scenario'\r\nimport { resolution } from './resolution'\r\nimport { Player } from './player'\r\nimport { InputHandler } from './input'\r\n/*---------------------------------- ----------------------------------*/\r\n\r\n\r\nlet {GAME_WIDTH, GAME_HEIGHT,size_x,size_y} = resolution.SQUARE\r\nlet scenario = new Scenario(size_x,size_y,{density:0.15,dispersion:0.2,maxPropagation:0.5,minPropagation:0.05})\r\nwindow.player = new Player(sqm)\r\nscenario.positionPlayer(player)\r\n\r\nwindow.input = new InputHandler(player)\r\n\r\nconst sqm = GAME_HEIGHT/size_y\r\n/*---------------------------------- ----------------------------------*/\r\n\r\n\r\nlet canvas = document.getElementById('gameScreen');\r\nlet ctx = canvas.getContext('2d');\r\n\r\ncanvas.style.backgroundColor = 'rgba(200,200,50,0.5)'\r\ncanvas.setAttribute('width',GAME_WIDTH)\r\ncanvas.setAttribute('height',GAME_HEIGHT)\r\n\r\n\r\n/*---------------------------------- ----------------------------------*/\r\nlet lastTime = 0\r\n\r\nfunction gameLoop(timestamp){\r\n\r\n    let deltaTime = timestamp - lastTime\r\n\r\n    lastTime = timestamp\r\n\r\n    ctx.clearRect(0,0,GAME_WIDTH,GAME_HEIGHT)\r\n\r\n    scenario.movePlayer(player,deltaTime,timestamp)\r\n    player.move(timestamp)\r\n    \r\n    scenario.draw(ctx,size_x,size_y,sqm)\r\n\r\n    requestAnimationFrame(gameLoop)\r\n}\r\n\r\ngameLoop(0)","\r\nlet gamePaused = false;\r\n\r\nwindow.pause = function () {\r\n    var x = document.getElementsByClassName(\"play-pause\")[0];\r\n    if (gamePaused === true) {\r\n        x.style.backgroundColor = \"#07070700\"\r\n        gamePaused = false\r\n    } else {\r\n        x.style.backgroundColor = \"#07070780\"\r\n        gamePaused = true\r\n    }\r\n}","var gamejs = require('./game.js')\r\nvar dom = require('./dom.js')\r\n\r\n/* ------------------------------------- PAUSE -------------------------------------*/\r\n"]}