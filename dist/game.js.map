{"version":3,"sources":["scenario.js","resolution.js","player.js","input.js","game.js"],"names":["Scenario","size_x","size_y","optional_parameters","check","checkInput","console","log","density","dispersion","maxPropagation","minPropagation","gridMap","_generateMap","JSON","stringify","seedBlocksDensity","seedBlockLocations","blankMap","Array","fill","length","map","row","row_index","col","col_index","rand","Math","random","push","x","y","blockLocations","blocks","_generateSeedMap","maxBlocks","round","propagation","min","max","forEach","location","element","player","position","code","deltaTime","timestamp","moving","speed","lastMove","ctx","grid_element_size","fillStyle","fillRect","resolution","HD","GAME_WIDTH","GAME_HEIGHT","FULLHD","SQUARE_MOBILE","Player","health","module","InputHandler","gamePaused","enableCommands","document","addEventListener","spacebarPause","bind","stopCommand","keyboardCommands","querySelectorAll","classList","remove","querySelector","add","event","keyCode","pause","direction","window","replace","getElementsByClassName","style","backgroundColor","disableCommands","removeEventListener","scenario","sqm","positionPlayer","input","canvas","getElementById","getContext","setAttribute","lastTime","gameLoop","clearRect","movePlayer","move","draw","requestAnimationFrame"],"mappings":"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","file":"game.js","sourceRoot":"..\\public\\src","sourcesContent":["// Trocar forearch por for; calcular novos blocos somente nas extremidades (remover blocos antigos)\r\n\r\nexport class Scenario {\r\n    constructor(size_x,size_y,optional_parameters){\r\n        let check = this.checkInput(size_x,size_y,optional_parameters);if(check !=='TRUE'){console.log(check)}else{\r\n            this.size_x = size_x\r\n            this.size_y = size_y\r\n            if(optional_parameters.density){this.density = optional_parameters.density}else{this.density=0.2}\r\n            if(optional_parameters.dispersion){this.dispersion = optional_parameters.dispersion}else{this.dispersion=1}\r\n            if(optional_parameters.maxPropagation){this.maxPropagation = optional_parameters.maxPropagation}else{this.maxPropagation=1}\r\n            if(optional_parameters.minPropagation){this.minPropagation = optional_parameters.minPropagation}else{this.minPropagation=0.25}\r\n        }\r\n\r\n        this.gridMap\r\n\r\n        this._generateMap()\r\n    }\r\n\r\n    checkInput(size_x,size_y,optional_parameters) {\r\n        if(typeof size_x === 'number' & typeof size_y === 'number' & typeof optional_parameters === 'object'){\r\n            if (size_x > 0 & size_y > 0){\r\n                if (size_x % 1 === 0 & size_y % 1 === 0) {\r\n                    return('TRUE')\r\n                } else {\r\n                    return('Must use integers: size_x and size_y!')\r\n                }\r\n            } else {\r\n                return('Must be Greater than zero: size_x and size_y!')\r\n            }\r\n        } else {\r\n            return('size_x and size_y Must be Natural Numbers and optional_parameters Must be an object. received '+ JSON.stringify({\r\n                size_x:typeof size_x,\r\n                size_y:typeof size_y,\r\n                optional_parameters:typeof optional_parameters\r\n            }))\r\n        }\r\n    }\r\n\r\n    _generateSeedMap(){\r\n        let seedBlocksDensity = this.density*this.dispersion\r\n        // let seedBlocks = 0\r\n        let seedBlockLocations = []\r\n        let blocks = 0\r\n        \r\n        let blankMap = new Array(this.size_x).fill(new Array(this.size_y).fill(0))\r\n\r\n        if (seedBlocksDensity > 0) {\r\n            while (seedBlockLocations.length === 0){\r\n                this.gridMap = blankMap.map((row,row_index)=>{\r\n                    return(row.map((col,col_index)=>{\r\n                        let rand = Math.random()\r\n                        if(rand > seedBlocksDensity){\r\n                            return(0)\r\n                        } else {\r\n                            // seedBlocks++\r\n                            seedBlockLocations.push({x:row_index,y:col_index})\r\n                            return(1)\r\n                        }\r\n                    }))\r\n                })\r\n            }\r\n        }\r\n        return {\r\n            blockLocations: seedBlockLocations, \r\n            blocks: seedBlockLocations.length\r\n        }\r\n    }\r\n\r\n\r\n    _generateMap(){\r\n\r\n        let {blocks, blockLocations} = this._generateSeedMap()\r\n\r\n        let maxBlocks = Math.round(this.size_x*this.size_y*this.density)\r\n\r\n        if(blocks > 0){\r\n\r\n            while(blocks < maxBlocks){\r\n                \r\n                let propagation = Math.min(\r\n                    this.maxPropagation,\r\n                    Math.max(\r\n                        (maxBlocks - blocks)/(4*blocks),\r\n                        this.minPropagation\r\n                    )\r\n                )\r\n                \r\n                blockLocations.forEach(location =>{\r\n                    let neighboors = [{x:location.x,y:location.y+1},\r\n                                    {x:location.x+1,y:location.y},\r\n                                    {x:location.x,y:location.y-1},\r\n                                    {x:location.x-1,y:location.y}]\r\n                    neighboors.forEach(element => {\r\n                        if(element.x >= 0 & element.x < this.size_x & element.y >= 0 & element.y < this.size_y) {\r\n                            if(this.gridMap[element.x][element.y] === 0) {\r\n                                if(Math.random() < propagation) {\r\n                                    this.gridMap[element.x][element.y] = 1\r\n                                    blockLocations.push({x:element.x,y:element.y})\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n                blocks = blockLocations.length\r\n            }\r\n        }\r\n    }\r\n\r\n    positionPlayer(player){\r\n        player.position.x = Math.round(this.size_x/2-1)\r\n        player.position.y = Math.round(this.size_y/2-1)\r\n        this.gridMap[player.position.x][player.position.y] = player.code\r\n    }\r\n\r\n    movePlayer(player,deltaTime,timestamp){\r\n\r\n        if (deltaTime !== 0 && player.moving === false){\r\n\r\n            if( player.position.x + player.speed.x < this.size_x &&\r\n                player.position.x + player.speed.x >= 0 &&\r\n                player.position.y + player.speed.y < this.size_y &&\r\n                player.position.y + player.speed.y >= 0\r\n                ){\r\n                if (this.gridMap[player.position.x+player.speed.x][player.position.y+player.speed.y]===0){\r\n                    this.gridMap[player.position.x][player.position.y] = 0\r\n                    this.gridMap[player.position.x+player.speed.x][player.position.y+player.speed.y] = player.code\r\n\r\n                    player.position.x = player.position.x + player.speed.x\r\n                    player.position.y = player.position.y + player.speed.y\r\n                    player.moving = true\r\n                    player.lastMove = timestamp\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(ctx,size_x,size_y,grid_element_size){\r\n\r\n        for(let x=0;x<size_x;x++){\r\n            for (let y=0;y<size_y;y++){\r\n                if (this.gridMap[x][y]===1){\r\n                    ctx.fillStyle = 'rgb(64,64,64)'\r\n                    ctx.fillRect(\r\n                        grid_element_size*x,\r\n                        grid_element_size*y,\r\n                        grid_element_size,\r\n                        grid_element_size);\r\n                } else if (this.gridMap[x][y]===player.code) {\r\n                    ctx.fillStyle = 'rgb(64,64,128)'\r\n                    ctx.fillRect(\r\n                        grid_element_size*x,\r\n                        grid_element_size*y,\r\n                        grid_element_size,\r\n                        grid_element_size);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","export const resolution = {\r\n    HD:{\r\n        GAME_WIDTH:1200,\r\n        GAME_HEIGHT:720,\r\n        size_x:15,\r\n        size_y:9\r\n    },\r\n    FULLHD:{\r\n        GAME_WIDTH:1920,\r\n        GAME_HEIGHT:1080,\r\n        size_x:16,\r\n        size_y:9\r\n    },\r\n    SQUARE_MOBILE:{\r\n        GAME_WIDTH:290,\r\n        GAME_HEIGHT:290,\r\n        size_x:15,\r\n        size_y:15\r\n    }\r\n}","\r\nexport class Player {\r\n    constructor(){\r\n        this.code = 100101\r\n        this.health = 100\r\n        this.moving = false\r\n        this.lastMove = 0\r\n        this.speed = {\r\n            module:200,\r\n            x:0,\r\n            y:0\r\n        }\r\n        this.position = {\r\n            x : 0,\r\n            y : 0\r\n        }\r\n    }\r\n    move(timestamp){\r\n        if(timestamp - this.lastMove > this.speed.module){\r\n            this.moving = false\r\n        }\r\n    }\r\n}","\r\nexport class InputHandler{\r\n    constructor(player){\r\n        this.gamePaused = false;\r\n        this.enableCommands();\r\n\r\n        document.addEventListener('keydown',this.spacebarPause.bind(this))\r\n        document.addEventListener('keyup',this.stopCommand)\r\n    }\r\n\r\n    enableCommands(){\r\n        document.addEventListener('keydown',this.keyboardCommands)\r\n        document.querySelectorAll(\".commands-move img\").forEach(element => {element.classList.remove(\"commands-move-disabled\")});\r\n        document.querySelector(\".commands-power\").classList.remove(\"commands-power-disabled\")\r\n        document.querySelector(\".move-circle\").classList.remove(\"move-circle-disabled\")\r\n        document.querySelector(\".pause-text\").classList.add(\"pause-text-hide\")\r\n    }\r\n\r\n    spacebarPause() {\r\n        switch (event.keyCode){\r\n            case 32: this.pause()\r\n            break\r\n        }\r\n    }\r\n\r\n    stopCommand(event){\r\n        player.speed.x = 0\r\n        player.speed.y = 0\r\n    }\r\n\r\n    keyboardCommands(event){\r\n        switch(event.keyCode) {\r\n            case 37:\r\n                player.speed.x = -1\r\n                break\r\n            case 38:\r\n                player.speed.y = -1\r\n                break\r\n            case 39:\r\n                player.speed.x = 1\r\n                break\r\n            case 40:\r\n                player.speed.y = 1\r\n                break\r\n        }\r\n    }\r\n\r\n    buttonDirection(direction) {\r\n        if (!this.gamePaused){\r\n            switch(direction) {\r\n                case \"LEFT\":\r\n                    player.speed.x = -1\r\n                    break\r\n                case \"UP\":\r\n                    player.speed.y = -1\r\n                    break\r\n                case \"RIGHT\":\r\n                    player.speed.x = 1\r\n                    break\r\n                case \"DOWN\":\r\n                    player.speed.y = 1\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n    usePower() {\r\n        window.location.replace(\"/ranking\");\r\n    }\r\n\r\n    pause() {\r\n        const x = document.getElementsByClassName(\"play-pause\")[0];\r\n        if (this.gamePaused === true) {\r\n            x.style.backgroundColor = \"#07070700\" \r\n            this.gamePaused = false\r\n            this.enableCommands()\r\n        } else {\r\n            this.disableCommands()\r\n            this.stopCommand()\r\n            x.style.backgroundColor = \"#07070780\"\r\n            this.gamePaused = true\r\n        }\r\n    }\r\n\r\n    disableCommands(){\r\n        document.removeEventListener('keydown',this.keyboardCommands)\r\n        document.querySelectorAll(\".commands-move img\").forEach(element => {element.classList.add(\"commands-move-disabled\")});\r\n        document.querySelector(\".commands-power\").classList.add(\"commands-power-disabled\")\r\n        document.querySelector(\".move-circle\").classList.add(\"move-circle-disabled\")\r\n        document.querySelector(\".pause-text\").classList.remove(\"pause-text-hide\")\r\n    }\r\n}","// Contains the game logic\r\n// Only called for the play page\r\n/*---------------------------------- ----------------------------------*/\r\nimport { Scenario } from './scenario'\r\nimport { resolution } from './resolution'\r\nimport { Player } from './player'\r\nimport { InputHandler } from './input'\r\n/*---------------------------------- ----------------------------------*/\r\n\r\n\r\nlet {GAME_WIDTH, GAME_HEIGHT,size_x,size_y} = resolution.SQUARE_MOBILE\r\nlet scenario = new Scenario(size_x,size_y,{density:0.15,dispersion:0.2,maxPropagation:0.5,minPropagation:0.05})\r\nwindow.player = new Player(sqm)\r\nscenario.positionPlayer(player)\r\n\r\nwindow.input = new InputHandler(player)\r\n\r\nconst sqm = GAME_HEIGHT/size_y\r\n/*---------------------------------- ----------------------------------*/\r\n\r\n\r\nlet canvas = document.getElementById('gameScreen');\r\nlet ctx = canvas.getContext('2d');\r\n\r\ncanvas.style.backgroundColor = 'rgba(200,200,50,0.5)'\r\ncanvas.setAttribute('width',GAME_WIDTH)\r\ncanvas.setAttribute('height',GAME_HEIGHT)\r\n\r\n\r\n/*---------------------------------- ----------------------------------*/\r\nlet lastTime = 0\r\n\r\nfunction gameLoop(timestamp){\r\n\r\n    let deltaTime = timestamp - lastTime\r\n\r\n    lastTime = timestamp\r\n\r\n    ctx.clearRect(0,0,GAME_WIDTH,GAME_HEIGHT)\r\n\r\n    scenario.movePlayer(player,deltaTime,timestamp)\r\n    player.move(timestamp)\r\n    \r\n    scenario.draw(ctx,size_x,size_y,sqm)\r\n\r\n    requestAnimationFrame(gameLoop)\r\n}\r\n\r\ngameLoop(0)"]}